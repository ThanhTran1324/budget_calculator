{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleDelete","handleEdit","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","handleClearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","isEditting","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","edit","setEdit","editId","setEditId","useEffect","setItem","stringify","handleAlert","setTimeout","e","console","log","target","preventDefault","newExpenses","item","newitem","uuid","filter","editItem","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00720a09.chunk.js","sourcesContent":["import React from \"react\";\nimport { MdEdit, MdDelete } from \"react-icons/md\";\nconst ExpenseItem = ({ expense, handleDelete, handleEdit }) => {\n  const { id, charge, amount } = expense;\n  return (\n    <li className=\"item\">\n      <div className=\"info\">\n        <span className=\"expense\">{charge}</span>\n        <span className=\"amount\">${amount}</span>\n      </div>\n      <div>\n        <button\n          className=\"edit-btn\"\n          aria-label=\"edit button\"\n          onClick={() => handleEdit(id)}\n        >\n          <MdEdit />\n        </button>\n        <button\n          className=\"clear-btn\"\n          aria-label=\"delete button\"\n          onClick={() => handleDelete(id)}\n        >\n          <MdDelete />\n        </button>\n      </div>\n    </li>\n  );\n};\nexport default ExpenseItem;\n","import React from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport { MdDelete } from \"react-icons/md\";\nexport const ExpenseList = ({\n  expenses,\n  handleEdit,\n  handleDelete,\n  handleClearItems\n}) => {\n  return (\n    <>\n      <ul className=\"list\">\n        {expenses.map(expense => {\n          return (\n            <ExpenseItem\n              handleEdit={handleEdit}\n              key={expense.id}\n              expense={expense}\n              handleDelete={handleDelete}\n            />\n          );\n        })}\n      </ul>\n      {expenses.length > 0 && (\n        <button className=\"btn\" onClick={handleClearItems}>\n          Clear expenses <MdDelete className=\"btn-icon\" />\n        </button>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport { MdSend } from \"react-icons/md\";\n\nexport const ExpenseForm = ({\n  charge,\n  amount,\n  handleCharge,\n  handleAmount,\n  handleSubmit,\n  isEditting\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-center\">\n        <div className=\"form-group\">\n          <label htmlFor=\"expense\">charge</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"charge\"\n            name=\"charge\"\n            placeholder=\"e.g. rent\"\n            value={charge}\n            onChange={handleCharge}\n          ></input>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">amount</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id=\"amount\"\n            name=\"amount\"\n            placeholder=\"e.g. 100\"\n            value={amount}\n            onChange={handleAmount}\n          ></input>\n        </div>\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        {isEditting ? \"Edit\" : \"Submit\"}\n        <MdSend className=\"btn-icon\" />\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\n\nconst Alert = ({ type, text }) => {\n  return <div className={`alert alert-${type}`}>{text}</div>;\n};\nexport default Alert;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { ExpenseList } from \"./components/ExpenseList\";\nimport { ExpenseForm } from \"./components/ExpenseForm\";\nimport Alert from \"./components/Alert\";\nimport uuid from \"uuid/v4\";\n\nconst initialExpenses = localStorage.getItem(\"expenses\")\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\nfunction App() {\n  /******************* state values  *********************/\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses);\n  //single expense\n  const [charge, setCharge] = useState(\"\");\n  //single Amount\n  const [amount, setAmount] = useState(\"\");\n  //alert\n  const [alert, setAlert] = useState({ show: false });\n  //edit flag\n  const [edit, setEdit] = useState(false);\n  // editID\n  const [editId, setEditId] = useState(0);\n\n  useEffect(() => {\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n  /******************* functionality  *********************/\n  //create function to handle event of expense form\n  const handleCharge = e => {\n    console.log(`charge: ${e.target.value}`);\n    setCharge(e.target.value);\n  };\n  const handleAmount = e => {\n    console.log(`amount: ${e.target.value}`);\n    setAmount(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (charge !== \"\" && amount > 0) {\n      //edit function\n      console.log(edit);\n      if (edit) {\n        let newExpenses = expenses.map(item => {\n          if (item.id === editId) return { ...item, charge, amount };\n          else return item;\n        });\n        console.log(newExpenses);\n        setExpenses(newExpenses);\n        setEdit(false);\n        handleAlert({ type: \"success\", text: \"item Editted\" });\n      }\n      //add function\n      else {\n        const newitem = {\n          id: uuid(),\n          charge: charge,\n          amount: amount\n        };\n        setExpenses([...expenses, newitem]);\n        handleAlert({ type: \"success\", text: \"item added\" });\n      }\n\n      setCharge(\"\");\n      setAmount(\"\");\n    } else {\n      //seterror\n      handleAlert({\n        type: \"danger\",\n        text: \"Please fill up the Charge And Amount\"\n      });\n    }\n  };\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 3000);\n  };\n\n  //clear all items\n  const handleClearItems = () => {\n    console.log(\"cleared all items\");\n    setExpenses([]);\n  };\n\n  //delete on item\n  const handleDelete = id => {\n    console.log(`i got the id: ${id}`);\n    handleAlert({ type: \"danger\", text: `Item Deleted` });\n    setExpenses(\n      expenses.filter(item => {\n        return item.id !== id;\n      })\n    );\n  };\n  //find item with id\n\n  //edit item\n  const handleEdit = id => {\n    let editItem = expenses.find(item => item.id === id);\n    //console.log(editItem);\n    setEdit(true);\n    setEditId(id);\n    setCharge(editItem.charge);\n    setAmount(editItem.amount);\n  };\n  return (\n    <>\n      {alert.show && (\n        <Alert isEditting={edit} type={alert.type} text={alert.text} />\n      )}\n\n      <h1>Budget Calculator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          charge={charge}\n          amount={amount}\n          handleAmount={handleAmount}\n          handleCharge={handleCharge}\n          handleSubmit={handleSubmit}\n          isEditting={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          handleClearItems={handleClearItems}\n        />\n      </main>\n      <h1>\n        total spending:{\" \"}\n        <span>\n          $\n          {expenses.reduce((acc, curr) => {\n            return acc + parseInt(curr.amount);\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}